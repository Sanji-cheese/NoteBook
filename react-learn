  SPA 只有一个html
1  路由分前端和后端；前端路由：path->component，后端路由：path->function
2  前端路由依靠浏览器history,分H5推出的和hash值，前者好看兼容性存在问题，后者兼容性好，但有#符号
  纯函数：同样输入必须产生同样输出  不改变参数数据，不产生任何副作用（不做不靠谱的事）
3  用push unshift往数组里添东西，数组的地址并没有改变，不会触发react的render
4  reducer是一个纯函数处理器
5  setState同步方法引起react更新是为异步操作，其第二可选参数callback在render之后调用；
    如果新状态依赖原状态state，则可以使用函数式setState（（state，props）=>{} ）
6  lazyLoad  懒加载路由组件
  lazy() 并利用Suspense包裹路由组件
7  函数式组件 16.8 hooks
    原函数式组件没有this和state，
8  setState()
  执行setState()，会自动调用一次render
9  PureComponent 
  如果新数据的地址比旧数据的未改变，则shouldComponentUpdate返回false
10  this.props.render(pram)
  类似于Vue的slot
11 npm i  -g serve
  到指定path， serve build， 可以运行webpack打包后的build项目（build文件夹为根路径 ）
12  getDerivedStateFromError
   捕获子组件生命周期产生（render）的错误，return hasError：error；之后componentDidCatch处理错误
